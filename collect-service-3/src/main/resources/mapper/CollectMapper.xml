<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zpark.collect.mapper.CollectMapper" >

  <resultMap id="BaseResultMap" type="com.zpark.collect.domain.Collect" >
    <id column="collect_id" property="collectId" jdbcType="INTEGER" />
    <result column="collect_goods_id" property="collectGoodsId" jdbcType="INTEGER" />
    <result column="collect_time" property="collectTime" jdbcType="TIMESTAMP" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="collect_goods_image" property="collectGoodsImage" jdbcType="VARCHAR" />
    <result column="collect_goods_name" property="collectGoodsName" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="Base_Column_List" >
    collect_id, collect_goods_id, collect_time, user_id, collect_goods_image, collect_goods_name
  </sql>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from collect
    where collect_id = #{collectId,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from collect
    where collect_id = #{collectId,jdbcType=INTEGER}
  </delete>

  <delete id="deleteByUserIdAndGoodsId">
   delete  from collect where user_id=#{param1} and collect_goods_id=#{param2}

  </delete>

  <insert id="insert" parameterType="com.zpark.collect.domain.Collect" >
    insert into collect (collect_id, collect_goods_id, collect_time, 
      user_id, collect_goods_image, collect_goods_name
      )
    values (#{collectId,jdbcType=INTEGER}, #{collectGoodsId,jdbcType=INTEGER}, #{collectTime,jdbcType=TIMESTAMP}, 
      #{userId,jdbcType=INTEGER}, #{collectGoodsImage,jdbcType=VARCHAR}, #{collectGoodsName,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zpark.collect.domain.Collect" >
    insert into collect
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="collectId != null" >
        collect_id,
      </if>
      <if test="collectGoodsId != null" >
        collect_goods_id,
      </if>
      <if test="collectTime != null" >
        collect_time,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="collectGoodsImage != null" >
        collect_goods_image,
      </if>
      <if test="collectGoodsName != null" >
        collect_goods_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="collectId != null" >
        #{collectId,jdbcType=INTEGER},
      </if>
      <if test="collectGoodsId != null" >
        #{collectGoodsId,jdbcType=INTEGER},
      </if>
      <if test="collectTime != null" >
        #{collectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="collectGoodsImage != null" >
        #{collectGoodsImage,jdbcType=VARCHAR},
      </if>
      <if test="collectGoodsName != null" >
        #{collectGoodsName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zpark.collect.domain.Collect" >
    update collect
    <set >
      <if test="collectGoodsId != null" >
        collect_goods_id = #{collectGoodsId,jdbcType=INTEGER},
      </if>
      <if test="collectTime != null" >
        collect_time = #{collectTime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="collectGoodsImage != null" >
        collect_goods_image = #{collectGoodsImage,jdbcType=VARCHAR},
      </if>
      <if test="collectGoodsName != null" >
        collect_goods_name = #{collectGoodsName,jdbcType=VARCHAR},
      </if>
    </set>
    where collect_id = #{collectId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zpark.collect.domain.Collect" >
    update collect
    set collect_goods_id = #{collectGoodsId,jdbcType=INTEGER},
      collect_time = #{collectTime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER},
      collect_goods_image = #{collectGoodsImage,jdbcType=VARCHAR},
      collect_goods_name = #{collectGoodsName,jdbcType=VARCHAR}
    where collect_id = #{collectId,jdbcType=INTEGER}
  </update>

  <select id="findAllByUserId" parameterType="java.lang.Integer" resultType="com.zpark.collect.domain.Collect">
     select * from collect where user_id=#{userId} order by collect_time
  </select>


  <select id="findCollectByUserIdAndGoodsId" resultType="com.zpark.collect.domain.Collect">
    select  <include refid="Base_Column_List"></include>
    from collect where user_id=#{param1} and collect_goods_id=#{param2}
  </select>


  <select id="recordTotal" resultType="java.lang.Integer">
  select  count(*) from collect WHERE user_id=#{userId}
  </select>

</mapper>